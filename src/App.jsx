import React, { useState, useEffect, useRef } from "react";
import TodoList from "./TodoList.jsx";
import AddTodoForm from "./AddTodoForm.jsx";
//import useSemiPersistentState from "./hooks/useSemiPersistentState.jsx";
import { BrowserRouter, Routes, Route } from "react-router-dom";

const App = () => {
  //const initialTodoList = []; // default empty list
  const [todoList, setTodoList] = useState([]); // initialize todolist state
  const [isLoading, setIsLoading] = useState(true); //new state isLoading
  const inputRef = useRef(null); //ref for the input element

  ///Beginning of GET
  // Fetch data from API
  const fetchData = async () => {
    const url = `https://api.airtable.com/v0/${
      import.meta.env.VITE_AIRTABLE_BASE_ID
    }/${import.meta.env.VITE_TABLE_NAME}`; // Construct the API URL

    const options = {
      method: "GET", // Specify the request method as GET
      headers: {
        Authorization: `Bearer ${import.meta.env.VITE_AIRTABLE_API_TOKEN}`,
      },
    };

    try {
      const response = await fetch(url, options); // Fetch data from the API
      if (!response.ok) {
        throw new Error(`Error: ${response.status}`); // Throw an error if the response status is not OK
      }
      const data = await response.json(); // Parse the response as JSON

      // console.log("API Data", data); //log API response data to the console

      const todos = data.records.map((record) => ({
        id: record.id,
        title: record.fields.title,
      })); // Process and extract the todo items
      setTodoList(todos); // Update the todoList state with fetched todos
      setIsLoading(false);
    } catch (error) {
      console.log("Fetch Error", error.message);
    }
  };
  ///End of GET

  /////Begining of POST
  // Function to add a new todo to Airtable and update the todoList
  const addTodoToAPI = async (newTitle) => {
    const url = `https://api.airtable.com/v0/${
      import.meta.env.VITE_AIRTABLE_BASE_ID
    }/${import.meta.env.VITE_TABLE_NAME}`;

    const options = {
      method: "POST", // Use POST method to add new data
      headers: {
        Authorization: `Bearer ${import.meta.env.VITE_AIRTABLE_API_TOKEN}`,
        "Content-Type": "application/json", // Content type must be JSON
      },
      body: JSON.stringify({
        fields: {
          title: newTitle, // Send the new todo title to Airtable
        },
      }),
    };

    try {
      const response = await fetch(url, options); // Send the POST request
      if (!response.ok) {
        throw new Error(`Error: ${response.status}`); // Handle any errors
      }
      const data = await response.json(); // Get the response data from Airtable
      const newTodo = {
        id: data.id, // Get the ID generated by Airtable
        title: data.fields.title, // Use the title returned from Airtable
      };
      setTodoList((prevList) => [...prevList, newTodo]); // Add the new todo to your list
    } catch (error) {
      console.log("Fetch Error", error.message); // Log any errors
    }
  };
  ////End of POST

  // Beginning of DELETE
  const deleteTodo = async (id) => {
    const url = `https://api.airtable.com/v0/${
      import.meta.env.VITE_AIRTABLE_BASE_ID
    }/${import.meta.env.VITE_TABLE_NAME}/${id}`;

    const options = {
      method: "DELETE",
      headers: {
        Authorization: `Bearer ${import.meta.env.VITE_AIRTABLE_API_TOKEN}`,
      },
    };

    try {
      const response = await fetch(url, options); // Send DELETE request to the API
      if (!response.ok) {
        throw new Error(`Error: ${response.status}`); // Handle response errors
      }
      // Update the local state by filtering out the deleted todo
      setTodoList((prevList) => prevList.filter((todo) => todo.id !== id));
    } catch (error) {
      console.log("Delete Error", error.message); // Handle fetch errors
    }
  };
  ////End of DELETE

  ///Beginning of UPDATE
  const updateTodoInAPI = async (id, newTitle) => {
    const url = `https://api.airtable.com/v0/${
      import.meta.env.VITE_AIRTABLE_BASE_ID
    }/${import.meta.env.VITE_TABLE_NAME}/${id}`;

    const options = {
      method: "PATCH",
      headers: {
        Authorization: `Bearer ${import.meta.env.VITE_AIRTABLE_API_TOKEN}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        fields: {
          title: newTitle,
        },
      }),
    };

    try {
      const response = await fetch(url, options); // Send the PATCH request
      if (!response.ok) {
        throw new Error(`Error: ${response.status}`); // Handle any errors
      }
      const data = await response.json(); // Get the response data from Airtable
      const updatedTodo = {
        id: data.id, // Get the ID of the updated todo
        title: data.fields.title, // Use the title returned from Airtable
      };
      // Update the todo in the local state
      setTodoList((prevList) =>
        prevList.map((todo) => (todo.id === id ? updatedTodo : todo))
      );
    } catch (error) {
      console.log("Update Error", error.message); // Log any errors
    }
  };
  ///End of UPDATE

  // useEffect to run the fetchData function when the component first renders
  useEffect(() => {
    fetchData(); // Call the fetchData function when the component mounts
  }, []); // Empty dependency array - runs only once after initial render

  // useEffect to save the todoList to localStorage whenever it changes
  useEffect(() => {
    // Only save to localStorage if we're not loading
    if (!isLoading) {
      localStorage.setItem("savedTodoList", JSON.stringify(todoList));
    }
  }, [todoList, isLoading]); // Dependency array includes todoList and isLoading

  // Function to add a new todo to the list
  const addTodo = (newTodo) => {
    addTodoToAPI(newTodo.title); // Call the function to add to Airtable
    inputRef.current.focus(); //focus back on the input
  };
  //   setTodoList((prevList) => [...prevList, newTodo]); //add new todo
  //   inputRef.current.focus(); //focus on the input after removing todo
  // };

  // Function to remove a todo from the list
  const removeTodo = (id) => {
    deleteTodo(id);
    // setTodoList((prevList) => prevList.filter((todo) => todo.id !== id));
  };

  // Function to handle the update action
  const updateTodo = (id, updatedTitle) => {
    updateTodoInAPI(id, updatedTitle); // Call the function to update in Airtable
  };

  // The JSX that defines what the UI looks like
  return (
    <BrowserRouter>
      <Routes>
        <Route
          path="/"
          element={
            <>
              <h1>Todo List</h1>
              {(() => {
                if (isLoading) {
                  return <p>Loading...</p>;
                } else {
                  return (
                    <>
                      <AddTodoForm onAddTodo={addTodo} inputRef={inputRef} />
                      <hr />
                      <TodoList
                        list={todoList}
                        title={"Healthy habits"}
                        onRemoveTodo={removeTodo}
                        onUpdateTodo={updateTodo}
                      />
                    </>
                  );
                }
              })()}
            </>
          }
        />
        <Route path="/new" element={<h1>New Todo List</h1>} />
      </Routes>
    </BrowserRouter>
  );
};

export default App;

/* /* <Search /> */
//</> const Search = () => {
//   const handleChange = (event) => {
//     //synthetic event
//     console.log(event);
//     //value of target (here: input HTML element)
//     console.log(event.target.value);
//   };

//   const handleMouseOver = (event) {
//     console.log(event);
//   }

//   return (
//     <div>
//       <label htmlFor="search">Search:</label>
//       <input id="search" type="text" onChange={handleChange} onMouseOver={handleMouseOver} />
//     </div>
//   );
// }; */}
